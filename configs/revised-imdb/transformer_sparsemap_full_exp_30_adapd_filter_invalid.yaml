# general args
seed: 1    # for reproducibility
default_root_dir: 'experiments/cfrat-imdb-full-exp-sparsemap-transformer/'  # path to save logs and models


# training args
train:
    # wandb
    wandb_project: 'cfrat'
    wandb_entity: 'mtreviso'

    # io
    save_rationales: True       # will be saved in a .txt in the default_root_dir as `{test|val}_rationales.txt`
    save_counterfactuals: True  # will be saved in a .txt in the default_root_dir as `{test|val}_counterfactuals.txt`
    save_tokenizer: False       # the tokenizer will be pickled and store in the checkpoint dir as `tokenizer.pickle`
    save_label_encoder: False   # the label encoder will be pickled and store in the checkpoint dir as `label_encoder.pickle`
    gpu_log: False              # whether to use the gpu callback to see gpu information in the logger

    # data
    dm: 'imdb_synthetic_exp'            # data module name (see docs for more options)
    batch_size: 8                   # minibatch size
    num_workers: 1                  # number of workers used for data loading (0 means that only a single core will be used)
    vocab_min_occurrences:  1       # frequency for a token to be added to the vocabulary
    max_seq_len: 512                # pretrained transformer limitation
    # max_dataset_size: 64          # for quick testing
    # is_original: null               # filter out samples by originality: True, False, or None (no filter, default)
    synthetic_edits_path: 'data/edits/imdb_train_beam_15_t5_small_30p_raw.tsv'
    filter_invalid_edits: True

    # early stopping
    monitor: 'val_ff_accuracy'     # quantity to be monitored
    monitor_mode: 'max'         # whether to see if monitored metric has stopped decreasing (min) or increasing (max)
    monitor_patience: 5         # number of epochs to wait for early stopping

    # pytorch-lightning rationalizer model
    model: 'transformer_spectra_cf_expl_supervised'
    ff_lbda: 1.0
    cf_lbda: 1.0
    expl_lbda: 0.1
    sparsemap_budget_strategy: 'adaptive_dynamic'

    # factual flow
    # ckpt: null
    # factual_ckpt: null
    # load_tokenizer: False
    # load_label_encoder: True
    tokenizer: 't5-small'
    gen_arch: 't5-small'
    gen_emb_requires_grad: False
    gen_encoder_requires_grad: False
    gen_use_decoder: False
    pred_emb_requires_grad: False
    pred_arch: 't5-small'
    pred_bidirectional: False
    pred_encoder_requires_grad: True
    pred_output_requires_grad: True
    shared_gen_pred: False
    explainer: 'sparsemap'
    explainer_pre_mlp: True
    explainer_requires_grad: True
    sparsemap_budget: 10
    sparsemap_temperature: 0.01
    sparsemap_transition: 0.0001
    dropout: 0.1
    selection_space: 'embedding'
    selection_vector: 'zero'
    selection_faithfulness: True
    selection_mask: False
    temperature: 1.0

    # model: optimizer
    optimizer: 'adamw'
    lr: 0.0001
    weight_decay: 0.000001
    betas: [0.9, 0.999]
    amsgrad: False
    momentum: 0.0
    dampening: 0.0
    nesterov: False
    alpha: 0.99   # for rmsprop
    centered: False  # for rmsprop
    lambd: 0.0001  # for asgd
    t0: 1000000.0  # for asgd

    # model: lr scheduler
    #scheduler: 'multistep'
    #milestones: [25, 50, 75]
    #lr_decay: 0.97  # a.k.a gamma

    # trainer (will be passed to pytorch-lightning's Trainer object)
    # see the complete list here: https://pytorch-lightning.readthedocs.io/en/stable/trainer.html#trainer-flags
    accelerator: gpu
    devices: 1
    gradient_clip_val: 5.0
    min_epochs: 3
    max_epochs: 10
    #limit_test_batches:
    #limit_train_batches: 10
    #limit_val_batches: 1
    #log_every_n_steps: 25


# the options defined here will overwrite the ones defined in the checkpoint
predict:
    # ckpt: null               # will be defined via cli --ckpt or will get last checkpoint version if it exists
    accelerator: gpu
    devices: 1
    load_tokenizer: False       # load a trained tokenizer stored in the checkpoint dir as `tokenizer.pickle`
    load_label_encoder: False   # load a trained label encoder stored in the checkpoint dir as `label_encoder.pickle`
